#version 450

// As defined in the C++ code
struct Particle {
  vec2 position;
  vec2 velocity;
  vec4 color;
};

// ubo
layout(binding = 0) uniform ParameterUBO { float deltaTime; }
ubo;

// shader storage buffer object with particle data from last frame
layout(std140, binding = 1) readonly buffer ParticleSSBOIn {
  Particle particlesIn[];
};

// SSBO for the current frame, updated in shader
layout(std140, binding = 2) buffer ParticleSSBOOut { Particle particlesOut[]; };

// compute only declaration related to the compute space
// Defines number of invocations of this compute shader in the current work
// group. This is the local part of the compute space. We are working in linear
// 1D array of particles .
layout(local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

void main() {
  // compute shader built-in variable
  // gl_GlobalInvocationID variable uniquely identifies the current
  // compute shader invocation accross the current dispatch.
  // We use this to index our particle array.
  uint index = gl_GlobalInvocationID.x;

  // Read from last frames SSBo
  Particle particleIn = particlesIn[index];

  // Write updated particle position to the SSBO for current frame
  particlesOut[index].position =
      particleIn.position + particleIn.velocity.xy * ubo.deltaTime;
  particlesOut[index].velocity = particleIn.velocity;

  // Flip movement at window border
  if ((particlesOut[index].position.x <= -1.0) ||
      (particlesOut[index].position.x >= 1.0)) {
    particlesOut[index].velocity.x = -particlesOut[index].velocity.x;
  }
  if ((particlesOut[index].position.y <= -1.0) ||
      (particlesOut[index].position.y >= 1.0)) {
    particlesOut[index].velocity.y = -particlesOut[index].velocity.y;
  }
}